---
title: "Using extraChIPs with GRAVI"
subtitle: "Hot mess or slick analysis?"
author: "Stephen (Stevie) Pederson"
date: 2022-12-01
institute: BiocAsia
editor: source
format: 
  revealjs:
    theme: [dark, custom.scss]
    width: 1600
    heigth: 900
    sansfont: Times New Roman
    logo: https://github.com/steveped/stickers/raw/main/extraChIPs_sticker.png
---

# Introduction

```{r setup, echo=FALSE, eval=TRUE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE, warning = FALSE
)
```


## Who Am I?

- Postdoctoral Bioinformatician (ECR)
    + Black Ochre Data Laboratories &nbsp; ![](tki.jpg){width=80px}
    + Based in Adelaide, South Australia
    + Traditional lands of the Kaurna people

. . .

- Author/Maintainer of `ngsReports` &nbsp; ![](https://github.com/steveped/stickers/raw/main/alt_ngsReports_sticker.png){width=70px}
   + Parse & plot `FastQC`, `cutadapt`, `STAR`, `macs2` etc.


## GRAVI

- 2020 - 2022: Dame Roma Mitchell Cancer Research Laboratories (DRMCRL)
- Activation of the Androgen Receptor (AR) as a therapeutic strategy for Breast Cancer
- Combined genomic changes to AR, ER & GATA3 binding after DHT-treatment (ChIP-Seq)
  + 4 cell lines + 2 PDX model
  + Additional Histone Marks
  + Additional HiC / HiChIP Data (Sometimes)
  + RNA Seq data

## GRAVI: Datasets

![](DRMCRL_datasets.jpg)


## GRAVI

- Gene Regulatory Analysis using Variable Inputs
- snakemake workflow
  + HTML Output inspired by `workflowr`
  + All code visible $\implies$ Reproducible as complete or in sections
- Performs 1) Custom Annotations, 2) Peak Calling, 3) Differential Binding
  + Enrchment Analysis performed during multiple steps
  + Standardised all output formats/structures
  + All `R` Environments saved (marked as `temp()`)
  
## GRAVI

- Minimal Data:
  + 1 ChIP Target across two conditions
- Best for 2-3 ChIP targets with 2-3 conditions
  + Enables Pairwise Comparisons
  + Optional Data: RNA-Seq Results, HiC Interactions, Genomic Features (H3K27ac)
  
## GRAVI

- `extraChIPs` became key infrastructure for GRAVI
- 3 Primary sets of Functions
  1. Working with `GRanges` focussed on `mcols()`
  2. ChIP-Seq Helper Functions
  3. Data Visualisation
  
# extraChIPs

## Working With Ranges: `tibble` Coercion

```{r eval = FALSE}
#| echo: frame
## S3 method for class 'DataFrame'
as_tibble(x, rangeAsChar = TRUE, ...)

## S3 method for class 'GenomicRanges'
as_tibble(x, rangeAsChar = TRUE, name = "range", ...)

## S3 method for class 'Seqinfo'
as_tibble(x, ...)

## S3 method for class 'GInteractions'
as_tibble(x, rangeAsChar = TRUE, suffix = c(".x", ".y"), ...)
```

<br>

- Defined for `GRanges`, `DataFrame`, `Seqinfo` and `GInteractions` classes
- Handles `S4` Compressed list columns well (so far)
  + Uses `vctrs::vec_proxy()` to coerce to S3 lists

## Working With Ranges: `tibble` Coercion 

```{r, echo=FALSE, eval=TRUE}
library(GenomicRanges)
gr <- new("GRanges", seqnames = new("Rle", values = structure(2L, levels = c("chr1", 
"chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", 
"chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", 
"chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", 
"chrY"), class = "factor"), lengths = 4L, elementMetadata = NULL, 
    metadata = list()), ranges = new("IRanges", start = c(204732494L, 
204732666L, 204732666L, 204732666L), width = c(6195L, 4833L, 
4870L, 4870L), NAMES = NULL, elementType = "ANY", elementMetadata = NULL, 
    metadata = list()), strand = new("Rle", values = structure(1L, levels = c("+", 
"-", "*"), class = "factor"), lengths = 4L, elementMetadata = NULL, 
    metadata = list()), seqinfo = new("Seqinfo", seqnames = c("chr1", 
"chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", 
"chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", 
"chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", 
"chrY"), seqlengths = c(249250621L, 243199373L, 198022430L, 191154276L, 
180915260L, 171115067L, 159138663L, 146364022L, 141213431L, 135534747L, 
135006516L, 133851895L, 115169878L, 107349540L, 102531392L, 90354753L, 
81195210L, 78077248L, 59128983L, 63025520L, 48129895L, 51304566L, 
155270560L, 59373566L), is_circular = c(FALSE, FALSE, FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
FALSE, FALSE, FALSE), genome = c("GRCh37", "GRCh37", "GRCh37", 
"GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", 
"GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", 
"GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37", "GRCh37"
)), elementMetadata = new("DFrame", rownames = NULL, nrows = 4L, 
    elementType = "ANY", elementMetadata = NULL, metadata = list(), 
    listData = list(gene_name = c("CTLA4", 
    "CTLA4", "CTLA4", "CTLA4"), 
        transcript_name = c("CTLA4-205", "CTLA4-201", "CTLA4-204", 
        "CTLA4-203"))), elementType = "ANY", metadata = list())
```

Starting with the protein-coding transcripts for *CTLA4*


```{r}
gr
```


## Working With Ranges: `tibble` Coercion 

Now perform the coercion using `as_tibble()`

```{r}
#| output-location: column
library(extraChIPs)
tbl <- as_tibble(gr)
tbl
```

. . . 

<br>

Setting `rangeAsChar = FALSE` gives you standard `as.data.frame` columns

```{r}
as_tibble(gr, rangeAsChar = FALSE)
```


## Working With Ranges: `tibble` Coercion

Coercion back to a `GRanges` uses `colToRanges()`

```{r}
#| output-location: column
tbl
```
<br>
```{r}
sq <- seqinfo(gr)
colToRanges(tbl, var = "range", seqinfo = sq)
```


## Operations Retaining `mcols`: `reduceMC()`


```{r}
gr
```


Common functions like `reduce` lose `mcols` information

```{r}
reduce(gr)
```

## Operations Retaining `mcols`: `reduceMC()`


```{r}
gr
```


`reduceMC()` collapses the `mcols` information

```{r}
reduceMC(gr)
```


## Operations Retaining `mcols`: `reduceMC()`

More realistically we might want to find unique TSS within a gene

```{r}
library(magrittr)
gr %>% 
  resize(width = 1, fix = 'start') %>% 
  reduceMC()
```

. . . 

- Columns are simplified to vectors by default where possible.



## Set Operations Retaining `mcols`

- Set operations have `*MC()` versions
- `setdiff()` Vs `setdiffMC()`
- `union` Vs `unionMC()`
- `intersect` Vs `intersectMC()`

. . .

`mcols` are only retained from the query `GRanges` (i.e. `x` in `setdiffMC(x, y)`)


## Tidyverse-inspired Functions: `chopMC()`


```{r}
gr
```

. . .

- `chopMC()` acts like `chop()` using the range as the backbone

```{r}
chopMC(gr)
```

## Tidyverse-inspired Functions: `distinctMC()`

```{r}
gr
```

- `distinctMC()` behaves like `distinct()` using the ranges + any requested columns

```{r}
distinctMC(gr)
```

## Tidyverse-inspired Functions: `distinctMC()`

```{r}
gr
```

- `distinctMC()` behaves like `distinct()` using the ranges + any requested columns


```{r}
distinctMC(gr, .keep_all = TRUE)
```

## Additional Helpers

`stitchRanges()` joins ranges setting barriers

```{r}
x <- GRanges(c("chr1:1-10", "chr1:101-110", "chr1:201-210"))
y <- GRanges("chr1:150-200:+")
x
```
<br>
```{r}
stitchRanges(x, exclude = y, maxgap = 100)
```


# Working with Peaks

## `importPeaks()`

Most often, we'll load in replicates with identical structure $\implies$ `GRangesList`

```{r}
library(glue)
fl <- glue("GATA3_E2_rep{1:2}.narrowPeak")
peaks <- importPeaks(fl, seqinfo = sq)
peaks
```

## `makeConsensus()` {.smaller}

```{r}
library(stringr)
names(peaks) <- str_remove_all(names(peaks), ".narrowPeak")
names(peaks)
```
<br>
```{r}
makeConsensus(peaks)
```

## `makeConsensus()` {.smaller}

Retain one or more columns from each replicate

```{r}
makeConsensus(peaks, var = "score")
```

## `makeConsensus()` {.smaller}

Example: Keep peak centres from each replicate

```{r}
library(plyranges)
peaks %>% 
  endoapply(mutate, centre = start + peak) %>% 
  makeConsensus(var = "centre", p = 1, simplify = FALSE) 
```

## `makeConsensus()` {.smaller}

Example: Keep peak centres from each replicate

```{r}
peaks %>% 
  endoapply(mutate, centre = start + peak) %>% 
  makeConsensus(var = "centre", p = 1, simplify = FALSE) %>% 
  mutate(centre = vapply(centre, median, numeric(1)))
```

## `plotOverlaps()`

```{r, fig.width=7, fig.height=7}
#| output-location: column
plotOverlaps(
  peaks, 
  set_col = c("blue", "yellow"),
  alpha = 0.2
)
```

## `plotOverlaps()`

```{r}
plotOverlaps(peaks, type = "upset", var = "score", set_col = c("blue", "yellow"))
```

# Differential Binding

## `dualFilter()`

Sliding Windows (`csaw::windowCounts()`)

- Discard non-signal windows using `dualFilter()`
- Combines signal-to-input and overall signal as filtering strategy
- Provide regions of expected signal as a guide

## GRAVI

- Smooth Quantile Normalisation on logCPM
- `limma-trend`
- Range-based $H_0$ (`treat()`)

## `plotAssayDensities()`

![A) Raw logCPM and b) Smooth Quantile Normalised logCPM for the Androgren Receptor (AR)](plot-logcpm-densities-1.png){fig-align="left"}

## `plotAssayRle()`

![RLE plot calculating RLE within treatment groups](plot-rle-normalised-1.png){fig-align="left"}

## `plotAssayPCA()`

![PCA plots A) before and B) after SQN](plot-pca-1.png){fig-align="left"}

## `mergeByCol()`

- Differential binding tested using sliding windows
- Merge adjacent sliding windows taking representative window
- GRAVI defaults to window with maximum signal
- wraps multiple `csaw` steps
- returns representative range

## `mergeByCol()`


```{r, echo=FALSE}
win <- data.frame(seqnames = "chr1", start = c(1, 51, 101), end = c(1, 51, 101) + 99) %>% 
  makeGRangesFromDataFrame()
set.seed(100)
win$AveExpr <- c(5, 7, 6) + rnorm(3)
win$logFC <- c(1, 1.5, 1.1) + rnorm(3)
win$PValue <- c(0.01, 0.00, 0.04) + rexp(3, 100)
```


```{r}
win
```

<br>

::: {.fragment fragment-index=1}
```{r}
mergeByCol(win, col = "AveExpr", pval = "PValue")
```
:::


# Visualisation

## `plotProfileHeatmap()`

:::: {.columns}

::: {.column width="50%"}

![](AR_Up_GATA3_Up_profile_heatmap.png){width="650px"}

:::

::: {.column width="50    %"}

Uses `ggplot2` plotting with facets for samples or peak groupings

:::

::::

## `plotHFGC()`

:::: {.columns}

::: {.column width="55%"}

- Wraps `GViz` plotting functions
- plot *optional* 1) HiC, 2) Features, 3) Genes or 4) Coverage
- Helpful for visualising multiple ranges quickly

:::

::: {.column width="45%"}

![](AR_Up_GATA3_Up_AveExpr.png)

:::

::::

## `plotPie()`

`plotPie()` summarises one, two or three columns in combination

```{r, fig.height=6, fig.width=6}
#| output-location: column
gr$detected <- c(FALSE, TRUE, FALSE, TRUE)
plotPie(gr, fill = "detected", category_width = 10)
```

## `plotPie()`

`plotPie()` summarises one, two or three columns in combination

```{r, fig.height=6, fig.width=6}
#| output-location: column
plotPie(gr, fill = "detected", x = "gene_name") 
```

Can also accept `DataFrame` or `data.frame` objects as input

